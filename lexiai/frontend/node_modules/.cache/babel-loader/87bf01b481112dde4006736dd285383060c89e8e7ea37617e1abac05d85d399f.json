{"ast":null,"code":"var _jsxFileName = \"/Users/jessicagoel/LegallyCoded-2/lexiai/frontend/src/context/AuthContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\n\n// Create a custom axios instance with specific config for auth requests\nconst authAxios = axios.create({\n  baseURL: 'http://localhost:5000',\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'X-Requested-With': 'XMLHttpRequest' // This helps some servers identify AJAX requests\n  }\n});\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // Check if user is stored in localStorage\n    const storedUser = localStorage.getItem('user');\n    if (storedUser) {\n      setCurrentUser(JSON.parse(storedUser));\n    }\n    setLoading(false);\n  }, []);\n  const login = async (username, password) => {\n    try {\n      // Log attempt details\n      console.log('Attempting login with username:', username);\n\n      // Use the custom axios instance\n      const response = await authAxios.post('/api/auth/login', {\n        username,\n        password\n      });\n      console.log('Login response:', response.data);\n\n      // Create a user object from the response\n      const user = {\n        id: response.data.user_id,\n        username: response.data.username\n      };\n      setCurrentUser(user);\n      localStorage.setItem('user', JSON.stringify(user));\n      return {\n        success: true\n      };\n    } catch (error) {\n      var _error$response, _error$response$data;\n      // Enhanced error logging\n      console.error('Login error:', {\n        message: error.message,\n        response: error.response ? error.response.data : 'No response data',\n        status: error.response ? error.response.status : 'No status code'\n      });\n      return {\n        success: false,\n        message: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || 'Login failed. Check your credentials and try again.'\n      };\n    }\n  };\n  const register = async (username, email, password) => {\n    try {\n      // Log attempt details\n      console.log('Attempting registration with username:', username, 'and email:', email);\n\n      // Make a direct fetch request to bypass potential axios issues\n      const response = await fetch('http://localhost:5000/api/auth/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username,\n          email,\n          password\n        })\n      });\n      const data = await response.json();\n      console.log('Register response:', data);\n      if (response.ok) {\n        return {\n          success: true,\n          message: data.message\n        };\n      } else {\n        return {\n          success: false,\n          message: data.error || 'Registration failed. Please try again with different credentials.'\n        };\n      }\n    } catch (error) {\n      // Enhanced error logging\n      console.error('Registration error:', {\n        message: error.message,\n        type: error.name,\n        stack: error.stack\n      });\n      return {\n        success: false,\n        message: 'Registration failed. Please check your network connection and try again.'\n      };\n    }\n  };\n  const logout = () => {\n    setCurrentUser(null);\n    localStorage.removeItem('user');\n  };\n  const value = {\n    currentUser,\n    login,\n    register,\n    logout,\n    isAuthenticated: !!currentUser\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"+Bt7EujFHjK6mRV3YX1iAtSqXvQ=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","axios","jsxDEV","_jsxDEV","AuthContext","authAxios","create","baseURL","headers","AuthProvider","children","_s","currentUser","setCurrentUser","loading","setLoading","storedUser","localStorage","getItem","JSON","parse","login","username","password","console","log","response","post","data","user","id","user_id","setItem","stringify","success","error","_error$response","_error$response$data","message","status","register","email","fetch","method","body","json","ok","type","name","stack","logout","removeItem","value","isAuthenticated","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/jessicagoel/LegallyCoded-2/lexiai/frontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\nimport axios from 'axios';\n\nexport const AuthContext = createContext();\n\n// Create a custom axios instance with specific config for auth requests\nconst authAxios = axios.create({\n  baseURL: 'http://localhost:5000',\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'X-Requested-With': 'XMLHttpRequest' // This helps some servers identify AJAX requests\n  }\n});\n\nexport const AuthProvider = ({ children }) => {\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // Check if user is stored in localStorage\n    const storedUser = localStorage.getItem('user');\n    if (storedUser) {\n      setCurrentUser(JSON.parse(storedUser));\n    }\n    setLoading(false);\n  }, []);\n\n  const login = async (username, password) => {\n    try {\n      // Log attempt details\n      console.log('Attempting login with username:', username);\n      \n      // Use the custom axios instance\n      const response = await authAxios.post('/api/auth/login', { \n        username, \n        password \n      });\n      \n      console.log('Login response:', response.data);\n      \n      // Create a user object from the response\n      const user = {\n        id: response.data.user_id,\n        username: response.data.username\n      };\n      \n      setCurrentUser(user);\n      localStorage.setItem('user', JSON.stringify(user));\n      return { success: true };\n    } catch (error) {\n      // Enhanced error logging\n      console.error('Login error:', {\n        message: error.message,\n        response: error.response ? error.response.data : 'No response data',\n        status: error.response ? error.response.status : 'No status code'\n      });\n      \n      return { \n        success: false, \n        message: error.response?.data?.error || 'Login failed. Check your credentials and try again.'\n      };\n    }\n  };\n\n  const register = async (username, email, password) => {\n    try {\n      // Log attempt details\n      console.log('Attempting registration with username:', username, 'and email:', email);\n      \n      // Make a direct fetch request to bypass potential axios issues\n      const response = await fetch('http://localhost:5000/api/auth/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          username,\n          email,\n          password\n        })\n      });\n      \n      const data = await response.json();\n      console.log('Register response:', data);\n      \n      if (response.ok) {\n        return { success: true, message: data.message };\n      } else {\n        return { \n          success: false, \n          message: data.error || 'Registration failed. Please try again with different credentials.'\n        };\n      }\n    } catch (error) {\n      // Enhanced error logging\n      console.error('Registration error:', {\n        message: error.message,\n        type: error.name,\n        stack: error.stack\n      });\n      \n      return { \n        success: false, \n        message: 'Registration failed. Please check your network connection and try again.'\n      };\n    }\n  };\n\n  const logout = () => {\n    setCurrentUser(null);\n    localStorage.removeItem('user');\n  };\n\n  const value = {\n    currentUser,\n    login,\n    register,\n    logout,\n    isAuthenticated: !!currentUser\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {!loading && children}\n    </AuthContext.Provider>\n  );\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}